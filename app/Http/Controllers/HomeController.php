<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Article;

class HomeController extends Controller
{
    //Забирает из БД 6 последних статей и передает их в шаблон
	//Рассмотрим сначала плохой пример кода, который справится с этой задачей. Дальше мы его превратим в приемлемый код, а потом отрефакторим
	public function index() {
		//orderBy - сортирует статьи по столбцу created_at по убыванию
		//get() - возвращает все эл
		//take(6) - берет первые 6 из них  //limit(6);
        //$articles = Article::orderBy('created_at', 'desc')->get()->take(6); //!1.НЕПРАВИЛЬНО составлен запрос: сначала берутся все статьи, а потом из них выбирается только 6
		
		//$articles = Article::orderBy('created_at', 'desc')->take(6)->get(); //!2.Проблема зароса n+1. Тут 13 заросов. Нам надо всего 6 статей, но т.к. у статей есть отношения  с статистикой и тегами, в итоге мы получаем 13 запросов в Базе Данных. Чтобы исправить эту проблему надо забирать из БД не только статьи, но и все зависимые модели сразу. Такой подход называется "ЖАДНОЙ ЗАГРУЗКОЙ ДЛЯ МНОЖЕСТВЕННЫХ ОТНОШЕНИЙ"
		
		//$articles = Article::with('state', 'tags')->orderBy('created_at', 'desc')->take(6)->get(); //!3.ЖАДНАЯ ЗАГРУЗКА ДЛЯ МНОЖЕСТВЕННЫХ ОТНОШЕНИЙ //3 запроса
		
		//Еще одна проблемма данного контоллера - это большой и длинный запрос в теле метода. Контроллеры надо держать тонкими. Обычно логику переносят в сервисный слой - это мы рассмотрим немного позже. Сейчас же мы рассмотрим другой подход - это использование скопов. Скопы - позволяют переносить в модель подобные заросы к БД
		//$articles = Article::lastLimit(); //scopeLastLimit($query)
		$articles = Article::lastLimit(6); //scopeLastLimit($query, $numbers)
		
        return  view('app.home', compact('articles'));
    }
}